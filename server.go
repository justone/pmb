package main

import (
	"github.com/justone/pmb/api"

	"fmt"
)

type ServerCommand struct {
	Name string `short:"n" long:"name" description:"Name of this server." default:"autogenerated"`
}

var serverCommand ServerCommand

func (x *ServerCommand) Execute(args []string) error {
	bus := pmb.GetPMB()

	conn, err := bus.GetConnection(urisFromOpts(globalOptions), "server")
	if err != nil {
		return err
	}

	introConn, err := bus.GetIntroConnection(urisFromOpts(globalOptions), "server")
	if err != nil {
		return err
	}

	return runServer(conn, introConn)
}

func init() {
	parser.AddCommand("server",
		"Run the local server agent.",
		"",
		&serverCommand)
}

func runServer(conn *pmb.Connection, introConn *pmb.Connection) error {
	fmt.Println(globalOptions)
	for {
		select {
		case message := <-conn.In:
			if message.Contents["type"].(string) == "CopyData" {
				copyToClipboard(message.Contents["data"].(string))

				data := map[string]interface{}{
					"type":   "DataCopied",
					"origin": message.Contents["id"].(string),
				}
				conn.Out <- pmb.Message{Contents: data}
			}

		case message := <-introConn.In:
			if message.Contents["type"].(string) == "RequestAuth" {
				// copy primary uri to clipboard
				copyToClipboard(globalOptions.Primary)
			}

			// any other message type is an error and ignored
		}
	}

	return nil
}
